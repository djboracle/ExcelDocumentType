SET SCAN OFF;

/*
    This file is part of the ExcelDocumentType application.

    ExcelDocumentType is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ExcelDocumentType is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ExcelDocumentType.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
Global Temporary table used to store the
Excel XML Document segments prior
to the document being fully assembled.
The user defined types, sequence, and temp table are REQUIRED for the ExcelDocumentType
to work correctly.
*/

/*--------

  11/09/2006
  Bug Fix: (Credited to Warick Sands from Australia) - 
  The getDocument member method would break with an error of 
  ORA-21560: argument 2 is null, invalid or out of range.

  Bug Fix: (Credited to Jason Bennett ... the author) - 
  The multipe worksheet feature was not working correctly.

  12/05/2006
  Enhancement: Added object id components to allow for multiple object instances.
               Added types and methods to allow the return of a Collection(PL/SQL Table)
               containing a "line-by-line" version of the document.

  01/21/2008
  Enhanchement: (Warwick Sands of Australia) changes to pushValue and createStyle to make XML more readable.

  04/08/2008
  Bug Fix: (Credited to Warick Sands of Australia) - Column count not reseting after starting a new sheet.

  06/22/2008
  Enhancement: (Added by Jason Bennett)
  Added the ability to add a footer and header to worksheet.  Added constant values to represent Excel Header and
  Footer format string values for setting page numbers, dates, time, path, filename, and font size.
  * NOTE * This enhancement changed the  method definitions and replaced the old methods for creating header values.

  03/01/2009
  Enhancement: (Credited to Hazi Gharagozlou of France)
  Updated all instances of the LENGTHB function to LENGTHC to account for Multi-byte character sets.  Good catch!

  04/14/2009
  Enhancement (Added by Jason Bennett)
  Added a new parameter, p_custom_attr, to the addCell, defineColumn, and rowOpen member procedures.  This will allow a knowledgable user
  to add addition attributes the <cell>, <column>, and <row> tags.  Altered the way columns are counted, allowing for greater flexability
  in document layout.

  05/27/2009
  Bug fix: (Credited to Ray Ho of Stardex UK)
  When displaying a document via a browser, it was discovered the headers were not always closing, resulting in an error.
  The following line of code: htp.p('Content-Length: '||document_length||NL_CHAR); was altered to read:
  htp.p('Content-Length: '||document_length);
  The newline charactered was apparently causing an issue with the headers. If anyone get the reverse issue ... add the NL_CHAR
  back to see if it fixes the problem.

  09/04/2009
  Enhancement: (Added by Jason Bennett)
  Added the ability to include worksheet level Conditional Formating for cells.
  
  11/05/2009
  Enhancement: (Added by Jason Bennett)
  Added ability to add a hyperlink to a cell.
  
  12/02/2009
  Multi-byte character issue fix (Credited to Gatis Ozolinš of ScanDicFusion)
  Content-Length header (actually document length) was not being calculated correctly for multi-byte characters. Simple solution ...
  don't include the header.  If anyone runs into an issue with not having this header ... let me know and I'll try and find a better
  solution.
  
  12/21/2009
  Added code to fix issue of unescaped invalid XML characters.  Thanks to Angus Lam for that catch!
  
  01/05/2010
  Added a new style element to allow for text rotation at the request of Alan Kirchoff of CLC Services. 
  
  02/21/2010
  Enhancement: (Added by Konstantin Kostyuchenko of BORLAS)
  Addition of Header/Footer Page Margins, Zoom, and text alignment indent style parameter.
  
  04/19/2010
  Enhancement: (Added by Jason Bennett)
  Added ability to freeze horizontal row ... i.e. you can freeze the header row and scroll everything below.
  
  04/27/2010
  Bug fix: (Thanks to Michael Spitzer) My last update broke conditional formatting ... tags were in the wrong spot.
  
  05/11/2010
  Enhancement: (Added by Jason Bennett)
  Added ability to freeze vertical column ... i.e. you can freeze the column and scroll items to the left.
  
  05/21/2010
  Enhancement: (Added by Jason Bennett at the suggestion of Kevin Balfe)
  Added worksheet option for turning grid lines on or off.
  
  05/21/2010
  Enhancement: (Added by Jason Bennett at the request of Rune Langtind)
  Added ability to name file delivered to web browser.
  
  05/31/2010
  Enhancement: (Added by Jason Bennett)
  Added ability to set worksheet orientation (Portrait or Landscape)
  
  05/31/2010
  Enhancement: (Added by Jason Bennett)
  Added ability to create named row ranges for worksheet.  This is primarily
  used to allow the user to designate a repeating header row for printed reports.
  
  02/12/2012
  Enhancement: (Added by Jason Bennett at the suggestion of Benoit Olivro)
  Default document encoding to windows-1252 to allow for special characters.
  
  Enhancement: (Added by Jason Bennett at the suggestion of Sourav Banerjee)
  Return document structure as a REF_CURSOR ... uses SYS_REFCURSOR.
  
  Enhancement: (Added by Jason Bennett at the suggestion of Sourav Banerjee)
  Added a method for returning the document as a BLOB.
  
  
  Fix: (Found by Pierre (Peter) Chiu
  Frozen columns and rows ... scrolling with up and down arrows did not work.
  Issue fixed by adding correct XML.
  
----------*/

-- Needed if user wants to output the XML document as 

CREATE TYPE ExcelDocumentLine AS TABLE OF VARCHAR2(4000);
/

-- Needed to generate object id to allow multiple object instances to share the same Global Temp Table.
CREATE SEQUENCE excelobjectid_seq
 NOMAXVALUE
 NOMINVALUE
 NOCYCLE
 NOCACHE
/

CREATE GLOBAL TEMPORARY TABLE ExcelDocumentStore(
object_id    NUMBER(12),
seg_index    NUMBER(12),
segment      VARCHAR2(60),
seg_length   NUMBER(12),
value        VARCHAR2(4000)
)
/

CREATE INDEX ExcelDocumentStore_I ON ExcelDocumentStore(object_id,segment)
/

CREATE OR REPLACE TYPE ExcelDocumentType AS OBJECT(

   -- This is constant for the new line character.
   NL_CHAR            CHAR(1),

   -- Worksheet Header/Footer Format String
   WHF_FORMAT_PAGE     VARCHAR2(6),
   WHF_FORMAT_PAGES    VARCHAR2(6),
   WHF_FORMAT_DATE     VARCHAR2(6),
   WHF_FORMAT_TIME     VARCHAR2(6),
   WHF_FORMAT_FILEPATH VARCHAR2(6),
   WHF_FORMAT_FILE     VARCHAR2(6),
   WHF_FORMAT_TAB      VARCHAR2(6),
   WHF_FORMAT_LEFT     VARCHAR2(6),
   WHF_FORMAT_RIGHT    VARCHAR2(6),
   WHF_FORMAT_CENTER   VARCHAR2(6),
   WHF_FORMAT_FONT     VARCHAR2(8),
   
   -- Repeat Row Range Option
   WT_REPEAT_HEADER_IND VARCHAR2(12),

    -- Column Width Multiplier
    CW_MULT           NUMBER(2,1),

     object_id        NUMBER(12),

    -- Index (counter) variables for each
    -- segment of the spreadsheet.
    -- All of the segments will be assembled
    -- into the completed document.

    styleSegIndex              NUMBER(12),
    colDefSegIndex             NUMBER(12),
    dataSegIndex               NUMBER(12),
    worksheetSegIndex          NUMBER(12),
    rowsSegIndex               NUMBER(12),
    cellsSegIndex              NUMBER(12),
    sheetHeaderFooterSegIndex  NUMBER(12),
    sheetHeaderDataIndex       NUMBER(12),
    sheetFooterDataIndex       NUMBER(12),
    sheetCondFormatSegIndex    NUMBER(12),
    sheetCondFormatDataIndex   NUMBER(12),
	sheetOptionsSegIndex       NUMBER(12),
    sheetNamesSegIndex         NUMBER(12),
    
    documentIndex     NUMBER(12),

    -- Document information variables
    -- Row and Column count are required 
    -- by Excel.
    -- Document Length is used when displaying
    -- the XML back via HTP or when generating
    -- a CLOB containing the document.

    row_count         NUMBER(12),
    temp_col_count    NUMBER(12),
    col_count         NUMBER(12),
    document_length   NUMBER(12),

    -- Constructor
    CONSTRUCTOR FUNCTION ExcelDocumentType RETURN SELF AS RESULT,

    -- Member Methods
    MEMBER PROCEDURE pushValue(p_index   NUMBER,
                               p_segment VARCHAR2,
                               p_value   VARCHAR2),
    MEMBER PROCEDURE purgeSegment(p_segment VARCHAR2 := NULL),
    MEMBER PROCEDURE documentOpen,
    MEMBER PROCEDURE documentClose,
    MEMBER PROCEDURE worksheetOpen(p_worksheetname VARCHAR2 := NULL),
    MEMBER PROCEDURE worksheetNamesOpen,
    MEMBER PROCEDURE worksheetNamedRowRange(p_range_name VARCHAR2 := NULL,
                                            p_row_value  VARCHAR2 := NULL),
    MEMBER PROCEDURE worksheetNamesClose,                                        
	MEMBER PROCEDURE worksheetOptions(p_freeze_horiz_row    NUMBER := 0,
	                                  p_freeze_vertical_col NUMBER := 0,
                                      p_show_gridlines      BOOLEAN := TRUE),
    MEMBER PROCEDURE worksheetHeaderFooterOpen,
    MEMBER PROCEDURE worksheetHeaderValues(p_headerstring VARCHAR2 := NULL,
                                           p_fontsize     VARCHAR2 := NULL),
    MEMBER PROCEDURE worksheetFooterValues(p_footerstring VARCHAR2 := NULL,
                                           p_fontsize     VARCHAR2 := NULL),
										   
    MEMBER PROCEDURE worksheetHeaderFooterClose(p_Zoom          NUMBER := 100,
                                                p_PageBreakZoom NUMBER := 60,
                                                p_MarginB       NUMBER := 1, 
                                                p_MarginT       NUMBER := 1,
                                                p_MarginL       NUMBER := 0.75,
                                                p_MarginR       NUMBER := 0.75,
                                                p_orientation   VARCHAR2 := 'Portrait'),
											
    MEMBER PROCEDURE worksheetCondFormatOpen(p_range VARCHAR2 := NULL),
    MEMBER PROCEDURE worksheetCondFormatClose,
    MEMBER PROCEDURE createCondFormat(p_qualifier    VARCHAR2 := NULL,
                                      p_value        VARCHAR2 := NULL,
                                      p_format_style VARCHAR2 := NULL),
    MEMBER PROCEDURE worksheetClose,

   MEMBER PROCEDURE rowOpen(p_style       VARCHAR2 := NULL,
                            p_custom_attr VARCHAR2 := NULL),
   MEMBER PROCEDURE rowClose,

   MEMBER PROCEDURE defineColumn(p_index VARCHAR2       := NULL,
                                 p_width NUMBER       := NULL,
                                 p_custom_attr VARCHAR2 := NULL),

   MEMBER PROCEDURE defaultStyle,

   MEMBER PROCEDURE stylesOpen,
   MEMBER PROCEDURE stylesClose,

   MEMBER PROCEDURE createStyle(p_style_id         VARCHAR2 := NULL,
                                p_font             VARCHAR2 := NULL,
                                p_ffamily          VARCHAR2 := NULL,
                                p_fsize            VARCHAR2 := NULL,
                                p_bold             VARCHAR2 := NULL,
                                p_italic           VARCHAR2 := NULL,
                                p_underline        VARCHAR2 := NULL,
                                p_text_color       VARCHAR2 := NULL,
                                p_cell_color       VARCHAR2 := NULL,
                                p_cell_pattern     VARCHAR2 := NULL,
                                p_align_vertical   VARCHAR2 := NULL,
                                p_align_horizontal VARCHAR2 := NULL,
								p_align_indent     VARCHAR2 := NULL,
                                p_wrap_text        VARCHAR2 := NULL,
                                p_rotate_text_deg  VARCHAR2 := NULL,
                                p_number_format    VARCHAR2 := NULL,
                                p_custom_xml       VARCHAR2 := NULL),


   MEMBER PROCEDURE addCell(p_col_index       VARCHAR2 := NULL,
                            p_data            VARCHAR2 := NULL,
                            p_data_type       VARCHAR2 := 'String',
                            p_style           VARCHAR2 := NULL,
                            p_formula         VARCHAR2 := NULL,
							p_HRef            VARCHAR2 := NULL,
                            p_named_cell_attr VARCHAR2 := NULL,
                            p_custom_attr     VARCHAR2 := NULL),  

   MEMBER PROCEDURE displayDocument(p_document_name VARCHAR2 := NULL),
   MEMBER FUNCTION getDocument                 RETURN CLOB,
   MEMBER FUNCTION getDocumentBlob             RETURN BLOB,
   MEMBER FUNCTION getDocumentDataRefCursor    RETURN SYS_REFCURSOR,
   MEMBER FUNCTION getDocumentData             RETURN ExcelDocumentLine,
   STATIC FUNCTION escapeData(p_data VARCHAR2) RETURN VARCHAR2

);
/
sho err;

/***************************************************************************************************************************/
/***************************************************************************************************************************/


CREATE OR REPLACE TYPE BODY ExcelDocumentType AS 


CONSTRUCTOR FUNCTION ExcelDocumentType RETURN SELF AS RESULT
IS
BEGIN

     -- Initialize "Constants"
     SELF.NL_CHAR :='
';

     SELF.CW_MULT := 5.5;   

     -- Set Object Id
     IF SELF.object_id IS NULL THEN
        EXECUTE IMMEDIATE 'SELECT excelobjectid_seq.nextval FROM dual' INTO SELF.object_id;
     END IF;

     -- Initialize Rowcount variables

     row_count       := 0;
     temp_col_count  := 0;
     col_count       := 0;
     document_length := 0;

     BEGIN
        EXECUTE IMMEDIATE 'DELETE from ExcelDocumentStore WHERE object_id=:object_id' USING SELF.object_id;
     EXCEPTION
        WHEN NO_DATA_FOUND THEN
             NULL;
     END;

     -- Initialize index variables

     SELF.styleSegIndex         := 0;


     SELF.colDefSegIndex              := 0;
     SELF.dataSegIndex                := 0;
     SELF.worksheetSegIndex           := 0;
     SELF.rowsSegIndex                := 0;
     SELF.cellsSegIndex               := 0;
     SELF.sheetHeaderFooterSegIndex   := 0;
     SELF.sheetHeaderDataIndex        := 0;
     SELF.sheetFooterDataIndex        := 0;
     SELF.sheetCondFormatSegIndex     := 0;
     SELF.sheetCondFormatDataIndex    := 0;
     SELF.documentIndex               := 0;
	 SELF.sheetOptionsSegIndex        := 0;
     SELF.sheetNamesSegIndex          := 0;
    

     -- Worksheet Header Format Types
   WHF_FORMAT_PAGE     := '&P';
   WHF_FORMAT_PAGES    := '&N';
   WHF_FORMAT_DATE     := '&D';
   WHF_FORMAT_TIME     := '&T';
   WHF_FORMAT_FILEPATH := '&Z';
   WHF_FORMAT_FILE     := '&F';
   WHF_FORMAT_TAB      := '&A';

   WHF_FORMAT_LEFT     := '&L';
   WHF_FORMAT_CENTER   := '&C';
   WHF_FORMAT_RIGHT    := '&R';

   WHF_FORMAT_FONT     := '&<F>';
   
   WT_REPEAT_HEADER_IND := 'Print_Titles';

    RETURN;

END;

/*======================================================================================================================*/
MEMBER PROCEDURE pushValue(p_index   NUMBER,
                           p_segment VARCHAR2,
                           p_value   VARCHAR2)
IS

   v_value VARCHAR2(4000) := NULL;

BEGIN

   v_value := LTRIM(RTRIM(p_value, ' '|| NL_CHAR), ' '|| NL_CHAR) ||NL_CHAR ;

   EXECUTE IMMEDIATE 'INSERT INTO ExcelDocumentStore(object_id,seg_index,segment,value,seg_length) VALUES (:object_id,:seg_index,:segment,:value,:seg_length)'
   USING SELF.object_id,p_index,p_segment,p_value,lengthc(v_value)+2;
   

END;

/*======================================================================================================================*/
MEMBER PROCEDURE purgeSegment(p_segment VARCHAR2 := NULL)
IS
BEGIN

  EXECUTE IMMEDIATE 'DELETE FROM ExcelDocumentStore WHERE object_id=:object_id AND segment=:segment'
  USING SELF.object_id,p_segment;

END;

/*======================================================================================================================*/
MEMBER PROCEDURE documentOpen
IS

  v_header VARCHAR2(4000) := NULL; 

BEGIN

     row_count := 0;
     col_count := 0;
     temp_col_count := 0;
     document_length := 0;

      -- Create Header

      v_header := '<?xml version="1.0"  encoding="windows-1252"?> '||NL_CHAR||
                  '<?mso-application progid="Excel.Sheet"?>'||NL_CHAR||
                  '<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"'||NL_CHAR||
                  ' xmlns:o="urn:schemas-microsoft-com:office:office"'||NL_CHAR||
                  ' xmlns:x="urn:schemas-microsoft-com:office:excel"'||NL_CHAR||
                  ' xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"'||NL_CHAR||
                  ' xmlns:html="http://www.w3.org/TR/REC-html40">'||NL_CHAR||
                  ' <DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">'||NL_CHAR||
                  '  <LastAuthor>'||USER||'</LastAuthor>'||NL_CHAR||
                  '  <Created>'||TO_CHAR(SYSDATE,'YYYY-MM-DD')||'T'||TO_CHAR(SYSDATE,'HH:MI:SS')||'</Created>'||NL_CHAR||
                  '  <Version>11.6408</Version>'||NL_CHAR||
                  ' </DocumentProperties>'||NL_CHAR||
                  ' <ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">'||NL_CHAR||
                  '  <WindowHeight>8445</WindowHeight>'||NL_CHAR||
                  '  <WindowWidth>11115</WindowWidth>'||NL_CHAR||
                  '  <WindowTopX>720</WindowTopX>'||NL_CHAR||
                  '  <WindowTopY>375</WindowTopY>'||NL_CHAR||
                  '  <RefModeR1C1/>'||NL_CHAR||
                  '  <ProtectStructure>False</ProtectStructure>'||NL_CHAR||
                  '  <ProtectWindows>False</ProtectWindows>'||NL_CHAR||
                  ' </ExcelWorkbook>';

      -- Add header segment

      documentIndex := documentIndex + 1;
      pushValue(documentIndex,'DOCUMENT',v_header);


END;
/*======================================================================================================================*/

   /*------------------*/
   /*  Document Close  */
   /*------------------*/

   MEMBER PROCEDURE documentClose
   IS

      /*CURSOR crsrSegmentData(cv_object_id NUMBER,
                             cv_segment   VARCHAR2) IS
      SELECT
              value
      FROM
              ExcelDocumentStore
      WHERE
              object_id = cv_object_id
      AND     segment = cv_segment
      ORDER BY seg_index ASC;*/


   BEGIN


      documentIndex := documentIndex + 1;
      pushValue(documentIndex,'DOCUMENT','</Workbook>');

      EXECUTE IMMEDIATE 'SELECT SUM(seg_length) FROM ExcelDocumentStore WHERE object_id=:object_id AND segment = ''DOCUMENT'''
      INTO document_length USING SELF.object_id;

   END;

/*======================================================================================================================*/

MEMBER PROCEDURE worksheetOpen(p_worksheetname VARCHAR2 := NULL)
IS

    v_worksheet_open   VARCHAR2(2000) := NULL;
    v_worksheet_table  VARCHAR2(2000) := NULL;

BEGIN

     v_worksheet_open  := ' <Worksheet ss:Name="'||ExcelDocumentType.escapeData(p_worksheetname)||'"> '||NL_CHAR;
     v_worksheet_table := '   <Table ss:ExpandedColumnCount="<colcnt>" ss:ExpandedRowCount="<rowcnt>" x:FullColumns="1" x:FullRows="1">';


     worksheetSegIndex := worksheetSegIndex + 1;
     
     pushValue(worksheetSegIndex,'WORKSHEET',v_worksheet_open);
     pushValue(worksheetSegIndex,'WORKSHEETTABLE',v_worksheet_table);

END;

/*======================================================================================================================*/
MEMBER PROCEDURE worksheetNamesOpen
IS

   v_worksheetnames_open VARCHAR2(7) := '<Names>';

BEGIN

   sheetNamesSegIndex := sheetNamesSegIndex + 1;
   pushValue(sheetNamesSegIndex,'WORKSHEETNAMES',v_worksheetnames_open);

END;

/*======================================================================================================================*/
-- "Print_Titles" is the name for setting repeating print rows.
-- Row value = "=Sheet1!R1" ... <sheetname>!R(ow)1(number)
MEMBER PROCEDURE worksheetNamedRowRange(p_range_name VARCHAR2 := NULL,
                                        p_row_value  VARCHAR2 := NULL)
IS

   v_named_range VARCHAR2(2000) := '<NamedRange ss:Name="<name>" ss:RefersTo="=<values>"/>';

BEGIN

   IF (p_range_name IS NOT NULL) AND (p_row_value IS NOT NULL) THEN
   
   
       v_named_range := REPLACE(v_named_range,'<name>',p_range_name);
       v_named_range := REPLACE(v_named_range,'<values>',p_row_value);
       
       sheetNamesSegIndex := sheetNamesSegIndex + 1;
       pushValue(sheetNamesSegIndex,'WORKSHEETNAMES',v_named_range);
   
   
   END IF;

END;

/*======================================================================================================================*/

MEMBER PROCEDURE worksheetNamesClose
IS

  v_worksheetnames_close VARCHAR2(8) := '</Names>';

BEGIN

   sheetNamesSegIndex := sheetNamesSegIndex + 1;
   pushValue(sheetNamesSegIndex,'WORKSHEETNAMES',v_worksheetnames_close);

END;                                   

/*======================================================================================================================*/
MEMBER PROCEDURE worksheetOptions(p_freeze_horiz_row    NUMBER := 0,
                                  p_freeze_vertical_col NUMBER := 0,
                                  p_show_gridlines      BOOLEAN := TRUE)
IS

   v_worksheet_options VARCHAR2(2000) := NULL;

BEGIN



   IF (p_freeze_horiz_row > 0 OR p_freeze_vertical_col > 0 OR NOT p_show_gridlines) THEN
   
      IF NOT p_show_gridlines THEN
   
         v_worksheet_options := v_worksheet_options||'<DoNotDisplayGridlines/>'||NL_CHAR;
   
      END IF;
   
      v_worksheet_options := v_worksheet_options||NL_CHAR||
                             '<FreezePanes/> '||NL_CHAR||
                             '<FrozenNoSplit/>'||NL_CHAR;
							 
	  IF p_freeze_horiz_row > 0 THEN
           v_worksheet_options := v_worksheet_options||'<SplitHorizontal>'||p_freeze_horiz_row||'</SplitHorizontal>'||NL_CHAR||
		                          '<TopRowBottomPane>'||p_freeze_horiz_row||'</TopRowBottomPane>'||NL_CHAR;
	  END IF;
	  
	  IF p_freeze_vertical_col > 0 THEN
           v_worksheet_options := v_worksheet_options||'<SplitVertical>'||p_freeze_vertical_col||'</SplitVertical>'||NL_CHAR||
		                          '<LeftColumnRightPane>'||p_freeze_vertical_col||'</LeftColumnRightPane>'||NL_CHAR;
	  END IF; 
      
      IF (p_freeze_horiz_row > 0) OR (p_freeze_vertical_col > 0) THEN
      
         IF (p_freeze_horiz_row > 0) AND (p_freeze_vertical_col > 0) THEN
         
            v_worksheet_options :=   v_worksheet_options||'<ActivePane>0</ActivePane>'||NL_CHAR||
                                                  '<Panes>'||NL_CHAR||
                                                  '<Pane>'||NL_CHAR||
                                                  '<Number>3</Number>'||NL_CHAR||
                                                  '</Pane>'||NL_CHAR||
                                                  '<Pane>'||NL_CHAR||
                                                  '<Number>1</Number>'||NL_CHAR||
                                                  '</Pane>'||NL_CHAR||
                                                  '<Pane>'||NL_CHAR||
                                                  '<Number>2</Number>'||NL_CHAR||
                                                  '</Pane>'||NL_CHAR||
                                                  '<Pane>'||NL_CHAR||
                                                  '<Number>0</Number>'||NL_CHAR||
                                                  '</Pane>'||NL_CHAR||
                                                  '</Panes>'||NL_CHAR;
         
         
         ELSIF (p_freeze_horiz_row > 0) THEN
         
         
           v_worksheet_options := v_worksheet_options||'<ActivePane>2</ActivePane>'||NL_CHAR||
                                       '<Panes>'||NL_CHAR||
                                       '<Pane>'||NL_CHAR||
                                       '<Number>3</Number>'||NL_CHAR||
                                       '</Pane>'||NL_CHAR||
                                       '<Pane>'||NL_CHAR||
                                       '<Number>2</Number>'||NL_CHAR||
                                       '<ActiveRow>2</ActiveRow>'||NL_CHAR||
                                       '<ActiveCol>3</ActiveCol>'||NL_CHAR||
                                       '</Pane>'||NL_CHAR||
                                       '</Panes>'||NL_CHAR;
         
         ELSIF (p_freeze_vertical_col > 0) THEN
         
           v_worksheet_options := v_worksheet_options||'<ActivePane>1</ActivePane>'||NL_CHAR||
                                       '<Panes>'||NL_CHAR||
                                       '<Pane>'||NL_CHAR||
                                       '<Number>3</Number>'||NL_CHAR||
                                       '</Pane>'||NL_CHAR||
                                       '<Pane>'||NL_CHAR||
                                       '<Number>1</Number>'||NL_CHAR||
                                       '<ActiveRow>2</ActiveRow>'||NL_CHAR||
                                       '<ActiveCol>3</ActiveCol>'||NL_CHAR||
                                       '</Pane>'||NL_CHAR||
                                       '</Panes>'||NL_CHAR;
         
         END IF;
      
      END IF;
                             
						
     sheetOptionsSegIndex := sheetOptionsSegIndex + 1;
     pushValue(worksheetSegIndex,'WORKSHEETOPTIONS',v_worksheet_options);

   END IF;

END;

/*======================================================================================================================*/

MEMBER PROCEDURE  worksheetHeaderFooterOpen
IS

  v_worksheetheader VARCHAR2(2000) := NULL;

BEGIN 

  v_worksheetheader := '<!-- Start Worksheet Header Footer Section -->';

  sheetHeaderFooterSegIndex := sheetHeaderFooterSegIndex + 1;
  pushValue(sheetHeaderFooterSegIndex,'SHEETHEADERFOOTER',v_worksheetheader);

END;

/*======================================================================================================================*/

MEMBER PROCEDURE worksheetHeaderValues(p_headerstring VARCHAR2,
                                       p_fontsize     VARCHAR2)
IS

   v_headerstring VARCHAR2(1000) := p_headerstring;

BEGIN




  IF p_fontsize IS NOT NULL THEN

     v_headerstring := REPLACE(v_headerstring,'<F>',p_fontsize); 

  ELSE

     v_headerstring := REPLACE(v_headerstring,'&<F>',NULL);

  END IF;


  sheetHeaderDataIndex := sheetHeaderDataIndex + 1;
  pushValue(sheetHeaderDataIndex,'SHEETHEADERDATA',ExcelDocumentType.escapeData(v_headerstring)); 

END;

/*======================================================================================================================*/

MEMBER PROCEDURE worksheetFooterValues(p_footerstring VARCHAR2,
                                       p_fontsize     VARCHAR2)
IS

   v_footerstring VARCHAR2(1000) := p_footerstring;

BEGIN




  IF p_fontsize IS NOT NULL THEN

     v_footerstring := REPLACE(v_footerstring,'<F>',p_fontsize); 

  ELSE

     v_footerstring := REPLACE(v_footerstring,'&<F>',NULL);

  END IF;


  sheetFooterDataIndex := sheetFooterDataIndex + 1;
  pushValue(sheetFooterDataIndex,'SHEETFOOTERDATA',ExcelDocumentType.escapeData(v_footerstring)); 

END;

/*======================================================================================================================*/
MEMBER PROCEDURE worksheetHeaderFooterClose(p_Zoom          NUMBER := 100,
                                            p_PageBreakZoom NUMBER := 60,
                                            p_MarginB       NUMBER := 1, 
                                            p_MarginT       NUMBER := 1,
                                            p_MarginL       NUMBER := 0.75,
                                            p_MarginR       NUMBER := 0.75,
                                            p_orientation   VARCHAR2 := 'Portrait')
IS

  CURSOR crsrSegmentData(cv_object_id NUMBER,
                         cv_segment   VARCHAR2) IS
  SELECT
         value
  FROM
         ExcelDocumentStore
  WHERE
         object_id = cv_object_id
  AND    segment   = cv_segment
  ORDER BY seg_index ASC;

  v_worksheetheaderfooter VARCHAR2(8000) := NULL;

  v_headerstring          VARCHAR2(4000) := NULL;
  v_footerstring          VARCHAR2(4000) := NULL;

BEGIN

  v_worksheetheaderfooter := '  <PageSetup> '||NL_CHAR||
                             '     <Layout x:Orientation="<orientation>"/>'||NL_CHAR||
                             '     <Header x:Data="<headerstring>"/> '||NL_CHAR||
                             '     <Footer x:Data="<footerstring>"/> '||NL_CHAR||
                             '     <PageMargins x:Bottom="p_MarginB" x:Left="p_MarginL" x:Right="p_MarginR" x:Top="p_MarginT"/>'||NL_CHAR|| 
                             '  </PageSetup> '||NL_CHAR||
                             '  <Zoom>p_Zoom</Zoom> '||NL_CHAR||
                             '  <PageBreakZoom>p_PageBreakZoom</PageBreakZoom>'||NL_CHAR||
                             '  <DoNotDisplayZeros/> '||NL_CHAR;
                            -- '</WorksheetOptions>';


  FOR sheetheader_rec IN crsrSegmentData(SELF.object_id,'SHEETHEADERDATA') LOOP

    v_headerstring := v_headerstring||sheetheader_rec.value;

  END LOOP;

  
  v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'<headerstring>',v_headerstring);
  
  IF p_orientation IS NOT NULL AND p_orientation IN ('Landscape','Portrait') THEN
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'<orientation>',p_orientation);
    
  ELSE
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'<orientation>','Portrait');
  
  END IF;
  
  IF p_MarginB IS NOT NULL THEN
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'p_MarginB',p_MarginB);
 
  ELSE
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'x:Bottom="p_MarginB"',NULL);
  
  END IF;
  
  IF p_MarginL IS NOT NULL THEN
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'p_MarginL',p_MarginL);
 
  ELSE
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'x:Left="p_MarginL"',NULL);
  
  END IF;
  
  IF p_MarginR IS NOT NULL THEN
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'p_MarginR',p_MarginR);
 
  ELSE
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'x:Right="p_MarginR"',NULL);
  
  END IF;
  
  IF p_MarginT IS NOT NULL THEN
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'p_MarginT',p_MarginT);
 
  ELSE
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'x:Top="p_MarginT"',NULL);
  
  END IF;
  
  IF p_Zoom IS NOT NULL THEN
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'p_Zoom',p_Zoom);
 
  ELSE
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'<Zoom>p_Zoom</Zoom> '||NL_CHAR,NULL);
  
  END IF;
  
  IF p_PageBreakZoom IS NOT NULL THEN
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'p_PageBreakZoom',p_PageBreakZoom);
 
  ELSE
  
    v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'<PageBreakZoom>p_PageBreakZoom</PageBreakZoom>'||NL_CHAR,NULL);
  
  END IF;

  purgeSegment('SHEETHEADERDATA');

  FOR sheetfooter_rec IN crsrSegmentData(SELF.object_id,'SHEETFOOTERDATA') LOOP

    v_footerstring := v_footerstring||sheetfooter_rec.value;

  END LOOP;

  v_worksheetheaderfooter := REPLACE(v_worksheetheaderfooter,'<footerstring>',v_footerstring);

  purgeSegment('SHEETFOOTERDATA');

  sheetHeaderFooterSegIndex := sheetHeaderFooterSegIndex + 1;
  pushValue(sheetHeaderFooterSegIndex,'SHEETHEADERFOOTER',v_worksheetheaderfooter); 

END;

/*======================================================================================================================*/
MEMBER PROCEDURE worksheetCondFormatOpen(p_range VARCHAR2 := NULL)
IS

  v_worksheetconditionalformat VARCHAR2(2000) := NULL;

BEGIN 

  v_worksheetconditionalformat := '<ConditionalFormatting xmlns="urn:schemas-microsoft-com:office:excel">';

  IF p_range IS NOT NULL THEN

    v_worksheetconditionalformat := v_worksheetconditionalformat||NL_CHAR||'<Range>'||p_range||'</Range>'||NL_CHAR;

  ELSE

    v_worksheetconditionalformat := v_worksheetconditionalformat||NL_CHAR||'<Range>R1:R10448576</Range>'||NL_CHAR;

  END IF;

  sheetCondFormatSegIndex := sheetCondFormatSegIndex + 1;
  pushValue(sheetCondFormatSegIndex,'SHEETCONDFORMAT',v_worksheetconditionalformat);

END;

/*======================================================================================================================*/

MEMBER PROCEDURE createCondFormat(p_qualifier    VARCHAR2 := NULL,
                                  p_value        VARCHAR2 := NULL,
                                  p_format_style VARCHAR2 := NULL)
IS

    v_conditional VARCHAR2(2000) := '<Condition>'||NL_CHAR||
                                    '   <Qualifier><p_qualifier></Qualifier>'||NL_CHAR||
                                    '   <value>'||NL_CHAR||
                                    '   <Format Style=''<p_format_style>''/>'||NL_CHAR||
                                    '</Condition>'||NL_CHAR;

    v_comma_cnt NUMBER(12) := 0;

    v_val_tag     VARCHAR2(500) := NULL;
    v_value       VARCHAR2(200) := NULL;
    v_pos_f       NUMBER(12)    := 0;
    v_pos_b       NUMBER(12)    := 0;

BEGIN


    IF p_qualifier IS NOT NULL THEN
       v_conditional := REPLACE(v_conditional,'<p_qualifier>',p_qualifier);
    ELSE
      v_conditional := REPLACE(v_conditional,'   <Qualifier><p_qualifier></Qualifier>'||NL_CHAR,NULL);
    END IF;

    IF UPPER(p_qualifier) = 'BETWEEN' THEN

        LOOP
          v_comma_cnt := v_comma_cnt + 1;
          EXIT WHEN INSTR(p_value,',',1,v_comma_cnt) < 1;
        END LOOP;       

        IF v_comma_cnt < 1 THEN

           v_val_tag := '<Value1>'||p_value||'</Value1>'||NL_CHAR||'<Value2>'||p_value||'</Value2>';

        ELSE

           FOR x IN 1 .. (v_comma_cnt + 1) LOOP

              v_pos_f := v_pos_b+1;
              v_pos_b := INSTR(p_value,',',1,x);
     
              IF (v_pos_b < 1) THEN v_pos_b := LENGTH(p_value)+1; END IF;
          
              v_value := SUBSTR(p_value,v_pos_f,v_pos_b-1);
            
              v_val_tag := v_val_tag||'<Value'||x||'>'||v_value||'</Value'||x||'>'||NL_CHAR;

           END LOOP;

        END IF;


        v_conditional := REPLACE(v_conditional,'<value>',v_val_tag);


    ELSE

      v_conditional := REPLACE(v_conditional,'<value>','<Value1>'||p_value||'</Value1>');

    END IF;

    v_conditional := REPLACE(v_conditional,'<p_value>',p_value);

    IF p_format_style IS NOT NULL THEN
       v_conditional := REPLACE(v_conditional,'<p_format_style>',p_format_style);
    ELSE
       v_conditional := REPLACE(v_conditional,'Style=''<p_format_style>''',NULL);
    END IF; 

    sheetCondFormatDataIndex := sheetCondFormatDataIndex + 1;
    pushValue(sheetCondFormatDataIndex,'CONDITION',v_conditional);   

END;

/*======================================================================================================================*/

MEMBER PROCEDURE worksheetCondFormatClose
IS

      CURSOR crsrConditionalSegData( cv_object_id   NUMBER,
                                     cv_segment     VARCHAR2) IS
      SELECT
              value
      FROM
              ExcelDocumentStore
      WHERE
              object_id = cv_object_id
      AND     segment = cv_segment
      ORDER BY seg_index ASC;

BEGIN

     -- Add conditions to conditional segment
     FOR cond_rec IN crsrConditionalSegData(SELF.object_id,'CONDITION') LOOP

      sheetCondFormatSegIndex := sheetCondFormatSegIndex + 1;
      pushValue(sheetCondFormatSegIndex,'SHEETCONDFORMAT',cond_rec.value);

     END LOOP;

     purgeSegment('CONDITION');

     sheetCondFormatSegIndex := sheetCondFormatSegIndex + 1;
     pushValue(sheetCondFormatSegIndex,'SHEETCONDFORMAT','</ConditionalFormatting>');


END;

/*======================================================================================================================*/

   /*-------------------*/
   /*  Worksheet Close  */
   /*-------------------*/

MEMBER PROCEDURE worksheetClose
IS

  CURSOR crsrSegmentData(cv_object_id  NUMBER,
                         cv_segment    VARCHAR2) IS
  SELECT
         seg_index,
         value
  FROM
         ExcelDocumentStore
  WHERE
         object_id = cv_object_id
  AND    segment   = cv_segment
  ORDER BY seg_index ASC;

  v_seg_data VARCHAR2(32000) := NULL;

BEGIN
  
  -- Row and Col counts
  FOR worksheet_rec IN crsrSegmentData(object_id,'WORKSHEETTABLE') LOOP

     v_seg_data := worksheet_rec.value;

     v_seg_data := REPLACE(v_seg_data,'<rowcnt>',SELF.row_count);
     v_seg_data := REPLACE(v_seg_data,'<colcnt>',SELF.col_count);

     EXECUTE IMMEDIATE 'UPDATE ExcelDocumentStore SET value = :value WHERE object_id=:object_id AND seg_index = :seg_index AND segment=''WORKSHEETTABLE'''
     USING v_seg_data,object_id,worksheet_rec.seg_index;


  END LOOP;
  
  
   -- Add Named Row Range Values
  -- Used primarily for repeating header row on printed reports
  
  FOR sheetname_rec IN crsrSegmentData(SELF.object_id,'WORKSHEETNAMES') LOOP

    worksheetSegIndex := worksheetSegIndex + 1;
    pushValue(worksheetSegIndex,'WORKSHEET',sheetname_rec.value);

  END LOOP;  
  
  -- Open table
  FOR table_rec IN crsrSegmentData(SELF.object_id,'WORKSHEETTABLE') LOOP

    worksheetSegIndex := worksheetSegIndex + 1;
    pushValue(worksheetSegIndex,'WORKSHEET',table_rec.value);

  END LOOP;  

  -- Add column defs
  FOR coldef_rec IN crsrSegmentData(SELF.object_id,'COLDEF') LOOP

    worksheetSegIndex := worksheetSegIndex + 1;
    pushValue(worksheetSegIndex,'WORKSHEET',coldef_rec.value);

  END LOOP;

  -- Add data seg
  FOR data_rec IN crsrSegmentData(SELF.object_id,'COLDATA') LOOP

    worksheetSegIndex := worksheetSegIndex + 1;
    pushValue(worksheetSegIndex,'WORKSHEET',data_rec.value);

  END LOOP;

  worksheetSegIndex := worksheetSegIndex + 1;
  pushValue(worksheetSegIndex,'WORKSHEET','</Table>'||NL_CHAR);


   -- Set Worksheet Conditional Format Values
  FOR conditionalformat_rec IN crsrSegmentData(SELF.object_id,'SHEETCONDFORMAT') LOOP

    worksheetSegIndex := worksheetSegIndex + 1;
    pushValue(worksheetSegIndex,'WORKSHEET',conditionalformat_rec.value);

  END LOOP;  
 
  -- Open Worksheet Options
  worksheetSegIndex := worksheetSegIndex + 1;
  pushValue(worksheetSegIndex,'WORKSHEET','<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">'||NL_CHAR); 

   -- Set Worksheet header
  FOR sheetheaderfooter_rec IN crsrSegmentData(SELF.object_id,'SHEETHEADERFOOTER') LOOP

    worksheetSegIndex := worksheetSegIndex + 1;
    pushValue(worksheetSegIndex,'WORKSHEET',sheetheaderfooter_rec.value);

  END LOOP;

  
  FOR worksheetOptions_rec IN crsrSegmentData(SELF.object_id,'WORKSHEETOPTIONS') LOOP
  
     
    worksheetSegIndex := worksheetSegIndex + 1;
    pushValue(worksheetSegIndex,'WORKSHEET',worksheetOptions_rec.value); 
  
  END LOOP;
  
  -- Close Worksheet Options
  worksheetSegIndex := worksheetSegIndex + 1;
  pushValue(worksheetSegIndex,'WORKSHEET','</WorksheetOptions>'||NL_CHAR); 

  -- Close Worksheet tagset

  worksheetSegIndex := worksheetSegIndex + 1;
  pushValue(worksheetSegIndex,'WORKSHEET','</Worksheet>'||NL_CHAR);

  -- Add worksheet segment
  FOR worksheet_rec IN crsrSegmentData(SELF.object_id,'WORKSHEET') LOOP

      documentIndex := documentIndex + 1;
      pushValue(documentIndex,'DOCUMENT',worksheet_rec.value);

  END LOOP;


  purgeSegment('COLDEF');
  purgeSegment('COLDATA');
  purgeSegment('SHEETCONDFORMAT');
  purgeSegment('WORKSHEET');
  purgeSegment('ROW');
  purgeSegment('CELL');
  purgeSegment('SHEETHEADERDATA');
  purgeSegment('SHEETFOOTERDATA');
  purgeSegment('SHEETHEADERFOOTER');
  purgeSegment('WORKSHEETOPTIONS');
  purgeSegment('WORKSHEETNAMES');
  purgeSegment('WORKSHEETTABLE');

  -- Reset Row and Column Counts
  SELF.row_count := 0;
  SELF.col_count := 0;
  SELF.temp_col_count := 0;

END;

/*======================================================================================================================*/

   /*-------------------*/
   /*  Styles Open      */
   /*-------------------*/

MEMBER PROCEDURE stylesOpen
IS
BEGIN

  styleSegIndex := styleSegIndex + 1;
  pushValue(styleSegIndex,'STYLE','<Styles>');

END;

/*======================================================================================================================*/

   /*-------------------*/
   /*  Styles Close     */
   /*-------------------*/

MEMBER PROCEDURE stylesClose
IS

      CURSOR crsrSegmentData( cv_object_id   NUMBER,
                              cv_segment     VARCHAR2) IS
      SELECT
              value
      FROM
              ExcelDocumentStore
      WHERE
              object_id = cv_object_id
      AND     segment = cv_segment
      ORDER BY seg_index ASC;

BEGIN

  styleSegIndex := styleSegIndex + 1;
  pushValue(styleSegIndex,'STYLE','</Styles>');

   -- Add style segment
   FOR style_rec IN crsrSegmentData(SELF.object_id,'STYLE') LOOP

      documentIndex := documentIndex + 1;
      pushValue(documentIndex,'DOCUMENT',style_rec.value);

   END LOOP;

   purgeSegment('STYLE');

END;

/*=====================================================================================================================*/
   
   /*-----------*/
   /* Row Open  */
   /*-----------*/

MEMBER PROCEDURE rowOpen(p_style       VARCHAR2 := NULL,
                         p_custom_attr VARCHAR2 := NULL)
IS

  v_row VARCHAR2(100) := '<Row ss:StyleID="<style>" <custom>>';

BEGIN

   SELF.temp_col_count := 0;
   SELF.row_count      := SELF.row_count + 1;

   IF p_style IS NOT NULL THEN

        v_row := REPLACE(v_row,'<style>',p_style);  

   ELSE

        v_row := REPLACE(v_row,' ss:StyleID="<style>"',NULL);

   END IF;

   v_row := REPLACE(v_row,'<custom>',p_custom_attr);

   rowsSegIndex := rowsSegIndex + 1;
   pushValue(rowsSegIndex,'ROW',v_row);

END;

/*=====================================================================================================================*/
 
   /*-------------*/
   /*  Row Close  */
   /*-------------*/

MEMBER PROCEDURE rowClose
IS  

  CURSOR crsrSegmentData(cv_object_id NUMBER,
                         cv_segment  VARCHAR2) IS
  SELECT
         seg_index,
         value
  FROM
         ExcelDocumentStore
  WHERE
         object_id = cv_object_id
  AND    segment   = cv_segment
  ORDER BY seg_index ASC;
 
BEGIN

  IF SELF.temp_col_count >= SELF.col_count THEN

    SELF.col_count := SELF.temp_col_count;
 
  END IF;


  FOR cell_rec IN crsrSegmentData(SELF.object_id,'CELL') LOOP

    rowsSegIndex := rowsSegIndex + 1;
    pushValue(rowsSegIndex,'ROW',cell_rec.value);
    
  END LOOP;

  rowsSegIndex := rowsSegIndex + 1;
  pushValue(rowsSegIndex,'ROW','</Row>'||NL_CHAR);

  FOR row_rec IN crsrSegmentData(SELF.object_id,'ROW') LOOP

    dataSegIndex := dataSegIndex + 1;
    pushValue(dataSegIndex,'COLDATA',row_rec.value);

  END LOOP;


  purgeSegment('ROW');
  purgeSegment('CELL');

END;

/*=====================================================================================================================*/

  /*------------------*/
  /*  Default Style   */
  /*------------------*/

MEMBER PROCEDURE defaultStyle
IS

    v_default_style VARCHAR2(2000) := NULL;

BEGIN

  v_default_style :=   '<Style ss:ID="Default" ss:Name="Normal"> '||NL_CHAR||
                       '<Alignment ss:Vertical="Bottom"/> '||NL_CHAR||
                       '<Borders/>'||NL_CHAR||
                       '<Font/> '||NL_CHAR||
                       '<Interior/> '||NL_CHAR||
                       '<NumberFormat/> '||NL_CHAR||
                       '<Protection/> '||NL_CHAR||
                       '</Style> '||NL_CHAR;

  styleSegIndex := styleSegIndex + 1;
  pushValue(styleSegIndex,'STYLE',v_default_style);

END;

/*=====================================================================================================================*/

  /*-----------------------------------------------*/
  /* Create a style to apply to one or more cells  */
  /* Some style items are not currently supported: */
  /* --Borders, Fill patterns, etc                 */
  /* -- Style ID is required.                      */
  /*-----------------------------------------------*/

MEMBER PROCEDURE createStyle(p_style_id         VARCHAR2 := NULL,
                             p_font             VARCHAR2 := NULL,
                             p_ffamily          VARCHAR2 := NULL,
                             p_fsize            VARCHAR2 := NULL,
                             p_bold             VARCHAR2 := NULL,
                             p_italic           VARCHAR2 := NULL,
                             p_underline        VARCHAR2 := NULL,
                             p_text_color       VARCHAR2 := NULL,
                             p_cell_color       VARCHAR2 := NULL,
                             p_cell_pattern     VARCHAR2 := NULL,
                             p_align_vertical   VARCHAR2 := NULL,
                             p_align_horizontal VARCHAR2 := NULL,
							 p_align_indent     VARCHAR2 := NULL,
                             p_wrap_text        VARCHAR2 := NULL,
                             p_rotate_text_deg  VARCHAR2 := NULL,
                             p_number_format    VARCHAR2 := NULL,
                             p_custom_xml       VARCHAR2 := NULL)
IS

      v_style_tag VARCHAR2(5000) := '<Style ss:ID="p_style_id">'||NL_CHAR||
                                    '  <Alignment ss:Vertical="p_align_vertical" ss:Horizontal="p_align_horizontal" ss:WrapText="p_wrap_text" ss:Rotate="p_rotate_text_deg" ss:Indent="p_align_indent"/>'||NL_CHAR||
                                    '  <Font ss:FontName="p_font" x:Family="p_ffamily" ss:Size="p_fsize" ss:Color="p_text_color" ss:Bold="p_bold" ss:Italic="p_italic" ss:Underline="p_underline"/>'||NL_CHAR||
                                    '  <Interior ss:Color="p_cell_color" ss:Pattern="p_cell_pattern"/>'||NL_CHAR||
                                    '  <NumberFormat ss:Format="p_number_format"/>'||NL_CHAR||
                                    '  <Custom> '||NL_CHAR||
                                    '</Style>'||NL_CHAR;
BEGIN

        IF p_style_id IS NOT NULL THEN

           -- Style Label/Name
           v_style_tag := REPLACE(v_style_tag,'p_style_id',p_style_id);
        
          -- Font Family
          IF p_ffamily IS NOT NULL THEN
             v_style_tag := REPLACE(v_style_tag,'p_ffamily',p_ffamily);
           ELSE
             v_style_tag := REPLACE(v_style_tag,' x:Family="p_ffamily"',NULL);
           END IF;

          -- Font 
          IF p_font IS NOT NULL THEN
             v_style_tag := REPLACE(v_style_tag,'p_font',p_font);
           ELSE
             v_style_tag := REPLACE(v_style_tag,' ss:FontName="p_font"',NULL);
           END IF;

          -- Font Size
          IF p_fsize IS NOT NULL THEN
            v_style_tag := REPLACE(v_style_tag,'p_fsize',p_fsize);
          ELSE
            v_style_tag := REPLACE(v_style_tag,' ss:Size="p_fsize"',NULL);
          END IF;

          -- Bold
          IF p_bold = 'Y' THEN
            v_style_tag := REPLACE(v_style_tag,'p_bold','1');
          ELSE
            v_style_tag := REPLACE(v_style_tag,' ss:Bold="p_bold"',NULL);
          END IF;

          -- Italics
          IF p_italic = 'Y' THEN
            v_style_tag := REPLACE(v_style_tag,'p_italic','1');
          ELSE
            v_style_tag := REPLACE(v_style_tag,' ss:Italic="p_italic"',NULL);
          END IF;

          -- Underline 
          IF p_underline IS NOT NULL THEN
            v_style_tag := REPLACE(v_style_tag,'p_underline',p_underline);
          ELSE
            v_style_tag := REPLACE(v_style_tag,' ss:Underline="p_underline"',NULL);
          END IF;

          -- Text color
          IF p_text_color IS NOT NULL THEN
            v_style_tag := REPLACE(v_style_tag,'p_text_color',p_text_color);
          ELSE
            v_style_tag := REPLACE(v_style_tag,' ss:Color="p_text_color"',NULL);
          END IF;

          -- Cell Color
          IF p_cell_color IS NOT NULL THEN
            v_style_tag := REPLACE(v_style_tag,'p_cell_color',p_cell_color);
          ELSE
            v_style_tag := REPLACE(v_style_tag,' ss:Color="p_cell_color"',NULL);
          END IF;

          -- Cell Pattern
          IF p_cell_pattern IS NOT NULL THEN
            v_style_tag := REPLACE(v_style_tag,'p_cell_pattern',p_cell_pattern);
          ELSE
            v_style_tag := REPLACE(v_style_tag,' ss:Pattern="p_cell_pattern"',NULL);
          END IF;

          -- Text Vertical Alignment
          IF p_align_vertical IS NOT NULL THEN
             v_style_tag := REPLACE(v_style_tag,'p_align_vertical',p_align_vertical);
          ELSE
             v_style_tag := REPLACE(v_style_tag,' ss:Vertical="p_align_vertical"',NULL);
          END IF;

          -- Text Horizontal Alignment
          IF p_align_horizontal IS NOT NULL THEN
             v_style_tag := REPLACE(v_style_tag,'p_align_horizontal',p_align_horizontal);
          ELSE
             v_style_tag := REPLACE(v_style_tag,' ss:Horizontal="p_align_horizontal"',NULL);
          END IF;
		  
          -- Text Align Indent
          IF p_align_indent IS NOT NULL THEN
             v_style_tag := REPLACE(v_style_tag,'p_align_indent',p_align_indent);
          ELSE
             v_style_tag := REPLACE(v_style_tag,' ss:Indent="p_align_indent"',NULL);
          END IF;
          
          -- Text Rotation
          IF p_rotate_text_deg IS NOT NULL THEN
             v_style_tag := REPLACE(v_style_tag,'p_rotate_text_deg',p_rotate_text_deg);
          ELSE
             v_style_tag := REPLACE(v_style_tag,' ss:Rotate="p_rotate_text_deg"',NULL);
          END IF;

          -- Text Wrap
          IF p_wrap_text = 'Y' THEN
             v_style_tag := REPLACE(v_style_tag,'p_wrap_text','1');
          ELSE
             v_style_tag := REPLACE(v_style_tag,' ss:WrapText="p_wrap_text"',NULL);
          END IF;

          -- Number Formatting
          IF p_number_format IS NOT NULL THEN
             v_style_tag := REPLACE(v_style_tag,'p_number_format',p_number_format);
          ELSE
             v_style_tag := REPLACE(v_style_tag,' ss:Format="p_number_format"',NULL);
          END IF;

        END IF;

        -- Custom XML
           IF p_custom_xml IS NOT NULL THEN
              v_style_tag := REPLACE(v_style_tag, '<Custom>',p_custom_xml);
           ELSE
              v_style_tag := REPLACE(v_style_tag,' <Custom> '||NL_CHAR,NULL);
           END IF;

     styleSegIndex := styleSegIndex + 1;
     pushValue(styleSegIndex,'STYLE',v_style_tag);
        

   END;

/*======================================================================================================================*/

MEMBER PROCEDURE defineColumn(p_index VARCHAR2  := NULL,
                              p_width NUMBER    := NULL,
                              p_custom_attr VARCHAR2 := NULL)
IS

   v_width  NUMBER(12)     := 0;
   v_coltag VARCHAR2(4000) := '<Column ss:Index="<index>" ss:AutoFitWidth="0" ss:Width="<width>" <custom> />';  
   
BEGIN

      IF p_width IS NOT NULL THEN
    
        v_width := TRUNC(p_width*CW_MULT);
        v_coltag := REPLACE(v_coltag,'<width>',v_width);

      ELSE

        v_coltag := REPLACE(v_coltag,'ss:Width="<width>"',NULL);

      END IF;

      IF p_index IS NOT NULL THEN

        v_coltag := REPLACE(v_coltag,'<index>',p_index);
      
      ELSE

        v_coltag := REPLACE(v_coltag,'ss:Index="<index>"',NULL);
    
      END IF;

      v_coltag := REPLACE(v_coltag,'<custom>',p_custom_attr);

     colDefSegIndex := colDefSegIndex + 1;
     pushValue(colDefSegIndex,'COLDEF',v_coltag);
      

END;

/*=============================================================================================================================*/

MEMBER PROCEDURE addCell(p_col_index       VARCHAR2 := NULL,
                         p_data            VARCHAR2 := NULL,
                         p_data_type       VARCHAR2 := 'String',
                         p_style           VARCHAR2 := NULL,
                         p_formula         VARCHAR2 := NULL,
						 p_HRef            VARCHAR2 := NULL,
                         p_named_cell_attr VARCHAR2 := NULL,
                         p_custom_attr     VARCHAR2 := NULL) 
IS

      v_cell VARCHAR2(32000) := '<Cell ss:Index="<index>" ss:Formula="=<formula>" ss:StyleID="<style>" ss:HRef="<href>" <custom> ><Data ss:Type="<datatype>"><p_data></Data><NamedCell></Cell>'||NL_CHAR;
      
      v_named_cell VARCHAR2(1000) := '<NamedCell ss:Name="<name>"/>';

BEGIN


       temp_col_count := temp_col_count + 1;


       -- CELL INDEX
       IF p_col_index IS NOT NULL THEN

          v_cell := REPLACE(v_cell,'<index>',p_col_index);
     
       ELSE

          v_cell := REPLACE(v_cell,' ss:Index="<index>"',NULL);

       END IF;

       -- CELL FORMULA
       IF p_formula IS NOT NULL THEN

          v_cell := REPLACE(v_cell,'<formula>',ExcelDocumentType.escapeData(p_formula));
     
       ELSE

          v_cell := REPLACE(v_cell,' ss:Formula="=<formula>"',NULL);

       END IF;

       -- CELL DATA
       IF p_data IS NOT NULL THEN

          v_cell := REPLACE(v_cell,'<p_data>','<![CDATA['||p_data||']]>');      

       ELSE

          v_cell := REPLACE(v_cell,'<p_data>',NULL);

       END IF;

       -- CELL DATA TYPE
       IF p_data_type IS NOT NULL THEN

          v_cell := REPLACE(v_cell,'<datatype>',p_data_type);
     
       ELSE

          v_cell := REPLACE(v_cell,' ss:Type="<datatype>"',NULL);

       END IF;

       --CELL STYLE
       IF p_style IS NOT NULL THEN

          v_cell := REPLACE(v_cell,'<style>',p_style);

       ELSE

          v_cell := REPLACE(v_cell,' ss:StyleID="<style>"',NULL);

       END IF;
	   
	   -- Hyperlink
	   IF p_HRef IS NOT NULL THEN
	   
	     v_cell := REPLACE(v_cell,'<href>',p_HRef);
	   
	   ELSE
	   
	     v_cell := REPLACE(v_cell,' ss:HRef="<href>"',NULL);
	   
	   END IF;
       
       -- Named Cell Data
       
       IF p_named_cell_attr IS NOT NULL THEN
       
         v_named_cell := REPLACE(v_named_cell,'<name>',p_named_cell_attr);
         v_cell       := REPLACE(v_cell,'<NamedCell>',v_named_cell);
       
       ELSE
       
         v_cell       := REPLACE(v_cell,'<NamedCell>',NULL);
       
       END IF;
       
       

       -- Custom Attribute
       v_cell := REPLACE(v_cell,'<custom>',p_custom_attr);

     cellsSegIndex := cellsSegIndex + 1;
     pushValue(cellsSegIndex,'CELL',v_cell);
END;

/*================================================================================================================*/
MEMBER PROCEDURE displayDocument(p_document_name VARCHAR2 := NULL)
IS


  CURSOR crsrSegmentData(cv_object_id NUMBER,
                         cv_segment   VARCHAR2) IS
  SELECT
         seg_index,
         value
  FROM
         ExcelDocumentStore
  WHERE
         object_id = cv_object_id
  AND    segment   = cv_segment
  ORDER BY seg_index ASC;

BEGIN

     -- Prepare Headers
     owa_util.mime_header('application/vnd.ms-excel',FALSE);
     --htp.p('Content-Length: '||document_length||NL_CHAR);
     --htp.p('Content-Length: '||document_length);
     
     IF p_document_name IS NOT NULL THEN
     
        htp.p('Content-Disposition: attachement; name="'||p_document_name||'"'||NL_CHAR);
     
     END IF;
     
     owa_util.http_header_close; 

  
     FOR doc_rec  IN crsrSegmentData(SELF.object_id,'DOCUMENT') LOOP
         htp.p(doc_rec.value);
    END LOOP;

END;

/*================================================================================================================*/

MEMBER FUNCTION getDocument RETURN CLOB
IS

  CURSOR crsrSegmentData(cv_object_id NUMBER,
                         cv_segment   VARCHAR2) IS
  SELECT
         seg_index,
         value,
         lengthc(value) seg_length
  FROM
         ExcelDocumentStore
  WHERE
         object_id = cv_object_id
  AND    segment   = cv_segment
  ORDER BY seg_index ASC;

 v_clob  CLOB;

BEGIN

      -- BuildDocument CLOB
      DBMS_LOB.createTemporary(v_clob,FALSE,DBMS_LOB.CALL);
      FOR doc_rec IN crsrSegmentData(SELF.object_id,'DOCUMENT') LOOP

         DBMS_LOB.writeappend(v_clob,doc_rec.seg_length,doc_rec.value);

      END LOOP;

    RETURN v_clob; 

END;

/*=========================================================================================================================*/

MEMBER FUNCTION getDocumentBlob RETURN BLOB
IS

  CURSOR crsrSegmentData(cv_object_id NUMBER,
                         cv_segment   VARCHAR2) IS
  SELECT
         seg_index,
         value,
         lengthc(value) seg_length
  FROM
         ExcelDocumentStore
  WHERE
         object_id = cv_object_id
  AND    segment   = cv_segment
  ORDER BY seg_index ASC;

 v_blob  BLOB;


BEGIN

      -- BuildDocument BLOB
      DBMS_LOB.createTemporary(v_blob,FALSE,DBMS_LOB.CALL);
      FOR doc_rec IN crsrSegmentData(SELF.object_id,'DOCUMENT') LOOP

         DBMS_LOB.writeappend(v_blob,doc_rec.seg_length,doc_rec.value);

      END LOOP;

    RETURN v_blob;

END;

/*=========================================================================================================================*/

MEMBER FUNCTION getDocumentDataRefCursor RETURN SYS_REFCURSOR
IS

  v_data_cursor SYS_REFCURSOR;

BEGIN

   OPEN v_data_cursor FOR SELECT value FROM ExcelDocumentStore WHERE object_id=SELF.object_id AND segment='DOCUMENT' ORDER BY seg_index ASC;

   RETURN v_data_cursor;

END;

/*=========================================================================================================================*/

MEMBER FUNCTION getDocumentData RETURN ExcelDocumentLine
IS

  CURSOR crsrDocumentData(cv_object_id NUMBER,
                          cv_segment   VARCHAR2) IS
  SELECT
         value
  FROM
         ExcelDocumentStore
  WHERE
         object_id = cv_object_id
  AND    segment   = cv_segment
  ORDER BY seg_index ASC;

  rec_docData   ExcelDocumentLine := ExcelDocumentLine();

BEGIN

   FOR doc_rec IN crsrDocumentData(SELF.object_id,'DOCUMENT') LOOP

      rec_docData.EXTEND;
      rec_docData(rec_docData.COUNT) := doc_rec.value;

   END LOOP;

   RETURN rec_docData;

END;

/*=========================================================================================================================*/

STATIC FUNCTION escapeData(p_data VARCHAR2) RETURN VARCHAR2
IS

   v_return VARCHAR2(2000) := p_data;

BEGIN

   v_return := REPLACE(v_return,'&','&amp;');
   v_return := REPLACE(v_return,'"','&quot;');
   v_return := REPLACE(v_return,'''','&apos;');
   v_return := REPLACE(v_return,'<','&lt;');
   v_return := REPLACE(v_return,'>','&gt;');
   v_return := REPLACE(v_return,'/','&#47;');
   v_return := REPLACE(v_return,CHR(10),'&#10;'); -- Carriage Returns
   
   RETURN v_return;


END;


/*---------------*/
/* END TYPE BODY */
/*---------------*/
END;
/

sho err;

    



